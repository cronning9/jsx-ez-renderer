import { RunProps } from "../index";

export type JSXChildren = (string | JSXElement | null)[];

/**
 * The main type of output generated by JSXEngine.run.
 */
export default class JSXElement {
  public type: string;
  public props: RunProps | null;
  public children: JSXChildren;

  constructor(type: string, props: RunProps | null, ...children: JSXChildren) {
    this.type = type;
    this.props = props;
    this.children = children;
  }

  get htmlString(): string {
    let renderedChildren: string;
    if (childrenAreElements(this.children)) {
      renderedChildren = (this.children)
        .map(c => c.htmlString)
        .join('');
    } else if (childrenContainsStrings(this.children)) {
      renderedChildren = '';
      for (const child of this.children) {
        if (child instanceof JSXElement) {
          renderedChildren += child.htmlString;
        } else {
          renderedChildren += child;
        }
      }
    } else {
      renderedChildren = '';
    }

    return `<${this.type}>${renderedChildren}</${this.type}>`;
  }
}

function childrenAreElements(children: JSXChildren): children is JSXElement[] {
  for (const child of children) {
    if (!(child instanceof JSXElement)) {
      return false;
    }
  }

  return true;
}

function childrenContainsStrings(children: JSXChildren): children is (string | JSXElement)[] {
  for (const child of children) {
    if (typeof child === 'string') {
      return true;
    }
  }

  return false;
}
