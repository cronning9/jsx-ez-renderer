import { idIsComponent } from ".";

export interface IElement<P extends {}> {
  identifier: string | IElement<P>;
  props: P | null;
  children: ElementChildren;

  readonly htmlString: string;
}

export type ElementChildren = (string | number | boolean | IElement<any> | null)[];

/**
 * The main type of output generated by JSXEngine.run.
 */
export default class Element<P extends {}> implements IElement<P> {
  public identifier: string | Element<P>;
  public props: P | null;
  public children: ElementChildren;

  constructor(identifier: string | (() => Element<P>), props: P | null, ...children: ElementChildren) {
    this.identifier = idIsComponent(identifier) ? identifier() : identifier;
    this.props = props;
    this.children = children;
  }

  get htmlString(): string {
    let renderedChildren: string;
    if (childrenAreElements(this.children)) {
      renderedChildren = this.children
        .map(c => c.htmlString)
        .join('');
    } else if (childrenContainsStringOutput(this.children)) {
      renderedChildren = '';
      for (const child of this.children) {
        if (child instanceof Element) {
          renderedChildren += child.htmlString;
        } else {
          renderedChildren += child;
        }
      }
    } else {
      renderedChildren = '';
    }

    const propString = this.getHtmlAttributes();
    const tag = propString ? `${this.identifier}${propString}` : this.identifier;
    return `<${tag}>${renderedChildren}</${this.identifier}>`;
  }

  private getHtmlAttributes() {
    if (!this.props || Object.entries(this.props).length < 1) {
      return null;
    }
    // TODO: add type safety so that value is not unknown.
    return Object.entries(this.props)
      .reduce((attributes, [key, value]) => {
        if (key === 'className') key = 'class';
        return attributes + ` ${key}="${String(value)}"`
      }, '');
  }
}

function childrenAreElements<P>(children: ElementChildren): children is IElement<P>[] {
  for (const child of children) {
    if (!(child instanceof Element)) {
      return false;
    }
  }

  return true;
}

/**
 * Note: non-string values that resolve to string output will count as Strings for our purposes
 * TODO: refactor and clarify exactly what we're doing here, and why. Possibly rewrite type definition 
 * and abstract JSXElement case into some other thing?
 */
function childrenContainsStringOutput<P>(children: ElementChildren): children is (string | number | boolean | IElement<P>)[] {
  for (const child of children) {
    if (typeof child === 'string' || typeof child === 'number' || typeof child === 'boolean') {
      return true;
    }
  }

  return false;
}